// Generated by CoffeeScript 1.8.0
var auth, ref, setupTabs, tab_location;

ref = new Firebase("https://browse-together.firebaseio.com");

tab_location = "users";

setupTabs = function(authData) {
  ref.child("" + tab_location + "/" + authData.uid + "/tabs").onDisconnect().remove();
  return chrome.tabs.query({}, function(tabs) {
    var new_tab_data, sendNewMessages, tab, timeout_id, _i, _len;
    new_tab_data = {};
    for (_i = 0, _len = tabs.length; _i < _len; _i++) {
      tab = tabs[_i];
      new_tab_data[tab.id] = {
        highlighted: tab.highlighted || false,
        icon: tab.favIconUrl || '',
        title: tab.title || 'unkown',
        url: tab.url
      };
    }
    timeout_id = null;
    sendNewMessages = function(messages) {
      if (timeout_id) {
        clearTimeout(timeout_id);
      }
      return timeout_id = setTimeout((function() {
        chrome.browserAction.setIcon({
          path: "icon2.png"
        });
        chrome.browserAction.setBadgeText({
          text: 'on'
        });
        return chrome.runtime.sendMessage(messages);
      }), 200);
    };
    return ref.child("" + tab_location + "/" + authData.uid + "/tabs").set(new_tab_data, function() {
      return ref.child("users").on('value', function(user_doc) {
        return ref.child("" + tab_location + "/" + authData.uid + "/profile/friends").on('value', function(doc) {
          var doc_val, friend, friends, friends_val, _j, _len1, _results;
          doc_val = user_doc.val() || {};
          friends_val = doc.val() || {};
          friends_val[authData.uid] = true;
          friends = Object.keys(friends_val || []);
          _results = [];
          for (_j = 0, _len1 = friends.length; _j < _len1; _j++) {
            friend = friends[_j];
            _results.push((function(friend) {
              return ref.child("private_users/" + friend).on('value', (function(doc) {
                doc_val[friend] || (doc_val[friend] = doc.val());
                return sendNewMessages(doc_val);
              }), function(error) {
                return sendNewMessages(doc_val);
              });
            })(friend));
          }
          return _results;
        });
      });
    });
  });
};

auth = localStorage.getItem('auth');

chrome.browserAction.setBadgeText({
  text: 'off'
});

if (auth) {
  ref.authWithCustomToken(auth, function(err, authData) {
    if (err) {
      return localStorage.removeItem('auth');
    } else {
      tab_location = localStorage.getItem('tab_location') || 'users';
      return ref.child("private_users/" + authData.uid + "/profile").once('value', function(doc) {
        if (doc.val()) {
          tab_location = "private_users";
          return setupTabs(authData);
        } else {
          tab_location = "users";
          return ref.child("users/" + authData.uid + "/profile").once('value', function(doc) {
            return setupTabs(authData);
          });
        }
      });
    }
  });
}

chrome.runtime.onMessageExternal.addListener(function(request, sender, sendResponse) {
  localStorage.setItem('auth', request.token);
  return ref.authWithCustomToken(request.token, function(err, authData) {
    return ref.child("" + tab_location + "/" + authData.uid + "/profile").once('value', function(og_doc) {
      var user_blob;
      if (!authData) {
        return;
      }
      user_blob = {};
      switch (request.provider) {
        case 'google':
          user_blob.name = request.google.displayName;
          user_blob.image = request.google.profileImageURL;
          user_blob.last_modified = Date.now();
          user_blob["private"] = og_doc.child('private').val() || false;
          user_blob.friends = og_doc.child('friends').val() || {};
          break;
        case 'github':
          user_blob.name = request.github.displayName;
          user_blob.image = request.github.profileImageURL;
          user_blob.last_modified = Date.now();
          user_blob["private"] = og_doc.child('private').val() || false;
          user_blob.friends = og_doc.child('friends').val() || {};
      }
      return ref.child("" + tab_location + "/" + authData.uid + "/profile").set(user_blob, function() {
        return setupTabs(authData);
      });
    });
  });
});

chrome.runtime.onMessage.addListener(function(request, sender, sendResponse) {
  var authData;
  switch (request.type) {
    case 'get-friends':
      authData = ref.getAuth();
      if (!authData) {
        return sendResponse(false);
      }
      ref.child("" + tab_location + "/" + authData.uid + "/profile").once('value', function(doc) {
        var friends, return_friends;
        friends = Object.keys(doc.child('friends').val() || {});
        return_friends = {};
        return async.each(friends, (function(friend, next) {
          return ref.child("private_users/" + friend).once('value', (function(doc) {
            return_friends[friend] = true;
            return next();
          }), function(error) {
            return_friends[friend] = false;
            return next();
          });
        }), function() {
          return sendResponse(return_friends);
        });
      });
      break;
    case 'get-local-user':
      authData = ref.getAuth();
      if (!authData) {
        return sendResponse(false);
      }
      ref.child("" + tab_location + "/" + authData.uid + "/profile").once('value', function(doc) {
        var val;
        val = doc.val();
        val.uid = authData.uid;
        return sendResponse(val || false);
      });
      break;
    case 'logout':
      authData = ref.getAuth();
      if (!authData) {
        return sendResponse(false);
      }
      ref.child("" + tab_location + "/" + authData.uid + "/tabs").remove();
      ref.child("users").off('value');
      chrome.browserAction.setIcon({
        path: "icon.png"
      });
      chrome.browserAction.setBadgeText({
        text: 'off'
      });
      localStorage.removeItem('auth');
      ref.unauth();
      return sendResponse(true);
    case 'save-friends':
      authData = ref.getAuth();
      if (!authData) {
        return sendResponse(false);
      }
      ref.child("" + tab_location + "/" + authData.uid + "/profile/friends").set(request.list, function() {
        return ref.child("" + tab_location + "/" + authData.uid + "/profile").once('value', function(doc) {
          var val;
          val = doc.val();
          val.uid = authData.uid;
          return sendResponse(val || false);
        });
      });
      break;
    case 'update-settings':
      authData = ref.getAuth();
      if (!authData) {
        return sendResponse(false);
      }
      ref.child("" + tab_location + "/" + authData.uid).once('value', function(doc) {
        var friends_only, image, name, tab_original, user_val, _ref;
        user_val = doc.val() || {};
        _ref = request.settings, name = _ref.name, image = _ref.image, friends_only = _ref.friends_only;
        if (user_val.profile == null) {
          user_val.profile = {};
        }
        user_val.profile.name = name;
        user_val.profile.image = image;
        user_val.profile["private"] = friends_only;
        tab_location = friends_only ? "private_users" : 'users';
        tab_original = doc.child('profile/private').val() ? "private_users" : 'users';
        return ref.child("" + tab_original + "/" + authData.uid + "/profile").set(user_val.profile, function() {
          user_val.profile.uid = authData.uid;
          if (tab_original === tab_location) {
            user_val.profile.uid = authData.uid;
            return sendResponse(user_val.profile);
          }
          console.log("" + tab_original + "/" + authData.uid, 'a');
          return ref.child("" + tab_original + "/" + authData.uid).remove(function() {
            console.log("" + tab_location + "/" + authData.uid, 'b', user_val);
            return ref.child("" + tab_location + "/" + authData.uid).set(user_val, function() {
              user_val.profile.uid = authData.uid;
              return sendResponse(user_val.profile);
            });
          });
        });
      });
      break;
    case 'messages':
      authData = ref.getAuth();
      if (!authData) {
        return sendResponse(false);
      }
      ref.child("users").once('value', function(doc_main) {
        return ref.child("" + tab_location + "/" + authData.uid).once('value', function(doc) {
          var cur_val, friends;
          cur_val = doc_main.val() || {};
          cur_val[authData.uid] = doc.val();
          friends = Object.keys(doc.child('profile/friends').val() || {});
          return async.each(friends, (function(friend, next) {
            return ref.child("private_users/" + friend).once('value', (function(doc) {
              cur_val[friend] || (cur_val[friend] = doc != null ? doc.val() : void 0);
              return next();
            }), function(error) {
              return next();
            });
          }), function() {
            return sendResponse(cur_val);
          });
        });
      });
  }
  return true;
});

chrome.tabs.onUpdated.addListener(function(tabId, changeInfo, tab) {
  var authData;
  if (changeInfo.status !== 'complete') {
    return;
  }
  authData = ref.getAuth();
  if (!authData) {
    return;
  }
  return ref.child("" + tab_location + "/" + authData.uid + "/tabs/" + tabId).set({
    highlighted: tab.highlighted || false,
    icon: tab.favIconUrl || '',
    title: tab.title || 'unkown',
    url: tab.url
  }, function() {
    return ref.child("" + tab_location + "/" + authData.uid + "/profile/last_modified").set(Date.now());
  });
});

chrome.tabs.onRemoved.addListener(function(tabId, changeInfo, tab) {
  var authData;
  authData = ref.getAuth();
  if (!authData) {
    return;
  }
  return ref.child("" + tab_location + "/" + authData.uid + "/tabs/" + tabId).remove(function() {
    return ref.child("" + tab_location + "/" + authData.uid + "/profile/last_modified").set(Date.now());
  });
});

chrome.tabs.onReplaced.addListener(function(new_tab_id, remove_tab_id) {
  var authData;
  authData = ref.getAuth();
  if (!authData) {
    return;
  }
  return ref.child("" + tab_location + "/" + authData.uid + "/tabs/" + remove_tab_id).once('value', function(obj) {
    var tab_data;
    tab_data = obj.val();
    return ref.child("" + tab_location + "/" + authData.uid + "/tabs/" + remove_tab_id).remove(function() {
      return ref.child("" + tab_location + "/" + authData.uid + "/tabs/" + new_tab_id).set(tab_data, function() {
        return ref.child("" + tab_location + "/" + authData.uid + "/profile/last_modified").set(Date.now());
      });
    });
  });
});

chrome.tabs.onActivated.addListener(function(_arg) {
  var authData, tabId, windowId;
  tabId = _arg.tabId, windowId = _arg.windowId;
  authData = ref.getAuth();
  if (!authData) {
    return;
  }
  return chrome.tabs.getAllInWindow(windowId, function(arr) {
    var tab, _i, _len, _ref, _results;
    _ref = arr || [];
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      tab = _ref[_i];
      _results.push((function(tab) {
        return ref.child("" + tab_location + "/" + authData.uid + "/tabs/" + tab.id).once('value', function(obj) {
          if (!(obj != null ? obj.val() : void 0)) {
            return;
          }
          return ref.child("" + tab_location + "/" + authData.uid + "/tabs/" + tab.id + "/highlighted").set(tab.highlighted, function() {
            return ref.child("" + tab_location + "/" + authData.uid + "/profile/last_modified").set(Date.now());
          });
        });
      })(tab));
    }
    return _results;
  });
});
